Personal Expense Tracker – Documentation
1. Assumptions

Each expense has a unique ID generated by the backend.

Categories are either pre-defined in the backend or typed manually by the user.

Amounts are positive numbers.

Date field follows the format YYYY-MM-DD.

Notes and created_by fields are optional.

Backend API endpoints are available at http://localhost:5000/api and handle CRUD operations, filtering, and summaries.

2. Design
Frontend

React with functional components and hooks (useState, useEffect).

CSS for styling, including modals, tables, and dropdowns.

State Management:

expenses: stores all expense records.

form & editForm: manage Add/Edit modal inputs.

filter: stores filter criteria (category, start/end dates).

summaryCategory & summaryMonth: store category/month summary data.

showAddModal, showEditModal, showSummaryModal, showDropdown: manage modal/dropdown visibility.

Backend (assumed)

Provides API endpoints:

GET /get_expenses – fetch all expenses

POST /add_expense – add a new expense

POST /update_expense – update existing expense

POST /delete_expense – delete expense

GET /categories – fetch all categories

GET /filter_expenses – filter expenses by date/category

GET /summary/category – total spent per category

GET /summary/month – total spent per month

UI Flow

Sidebar Filters: Filter expenses by category and date range.

Expenses Table: Display all expenses with Edit/Delete actions.

Add/Edit Modals: Add new or update existing expenses.

Summary Modal: View total spent by category or month via dropdown.

3. Sample Inputs / Outputs
Add Expense

Input:

{
  "amount": 250,
  "date": "2025-10-05",
  "note": "Lunch with client",
  "category": "Food",
  "created_by": "John"
}


Output:

Expense added to the database.

Table updated automatically.

Filter Expenses

Input:

{
  "category": "Food",
  "start_date": "2025-10-01",
  "end_date": "2025-10-31"
}


Output:

[
  { "id": 1, "amount": 250, "date": "2025-10-05", "note": "Lunch with client", "category": "Food" },
  { "id": 2, "amount": 100, "date": "2025-10-12", "note": "Coffee", "category": "Food" }
]

Summary by Category

Output:

[
  { "category": "Food", "total_spent": 350 },
  { "category": "Travel", "total_spent": 500 }
]

Summary by Month

Output:

[
  { "month": "October", "total_spent": 850 },
  { "month": "September", "total_spent": 430 }
]

4. Notes

Frontend is responsive and uses modals for Add/Edit/Summary views.

Basic validation is implemented in forms (required fields).

Filtering and summary functionalities are dynamic and fetch data from the backend.
